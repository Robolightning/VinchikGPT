import vk_api
import bs4
import requests
import urllib.request
import os
import shutil
from tkinter import Tk
import hashlib
from pathlib import Path
from tqdm import tqdm
import json
import asyncio
import schedule
import time
import html
from vk_api.longpoll import VkLongPoll, VkEventType
import vk_captchasolver
from io import BytesIO
from Classifier_train import train_model
from Classifier_evaluate import get_neural_predict
from ChatGPT import Gen_message_by_GPT

with open("token.txt", "r") as f:
    bot_token = f.read()

with open("openAI_token.txt", "r") as f:
    openAI_token = f.read()

def write_msg(user_id, message):
    return vk.method('messages.send', {'random_id': 0, 'user_id': user_id, 'message': message})

def captcha_handler(captcha):
    text = vk_captchasolver.solve(image = BytesIO(requests.get(captcha.get_url()).content))
    #key = ImageToTextTask.ImageToTextTask(anticaptcha_key="4dbd31ff2039565bdb79ffd1b6e60428", save_format='const').captcha_handler(captcha_link=captcha.get_url())

    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∫–∞–ø—á–µ–π
    return captcha.try_again(text)

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
vk = vk_api.VkApi(token = bot_token, captcha_handler = captcha_handler)

# –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
longpoll = VkLongPoll(vk)

Vinchik_ID = "-91050183"
Evil_corp_ID = "-29246653"

min_for_class = 100
max_for_class = 50000

model_girls = "girl_classifier_68.pth"
model_boys = "boy_classifier.pth"

val_k = 5 #–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ–≥–æ, –∫–∞–∫—É—é –¥–æ–ª—é –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é

default_settings = {
    "model": model_girls,
    "BL": [],
    "WL": [{"—Ñ–æ—Ç–æ": "–µ—Å—Ç—å"}],
    "reply": 
    {
        "friends": True,
        "message":
       {
           "friend": True,
           "GPT": True,
           "text": ""
           }
        },
    "stat": True,
    "autolike": 100,
    "autodislike": 100,
    "autopilot": -1,
    "my_form_text": "",
    "is_boy": True,
    "is_friend_boy": False
}

def get_dialogs(vk_local, user_id):
    dialogs = vk_local.messages.getHistory(peer_id = user_id)
    return dialogs['count']

def get_dataset(user_id, vk_local, vlen, elen, user_path, user_settings):
    likes_count = 0
    dislikes_count = 0
    train_path = user_path + "\\train_dir\\"
    path = train_path + "train\\"
    lpath = path + "like\\"
    dpath = path + "dislike\\"
    if os.path.exists(train_path):
        shutil.rmtree(train_path)
    os.mkdir(train_path)
    os.mkdir(path)
    os.mkdir(lpath)
    os.mkdir(dpath)
    two_chats = [[elen, Evil_corp_ID], [vlen, Vinchik_ID]]
    got_self_info = False
    self_info_not_complited = False
    last_message = ""
    my_form_text = ""
    is_boy = None
    for chat in two_chats:
        chat_id = chat[1]
        chat_len = chat[0]
        if chat[0] > 0:
            if chat_id == Evil_corp_ID:
                write_msg(user_id, "–ß–∏—Ç–∞—é —Ç–≤–æ–π —á–∞—Ç —Å –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π –∑–ª–∞")
            else:
                write_msg(user_id, "–ß–∏—Ç–∞—é —Ç–≤–æ–π —á–∞—Ç —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∞–π–≤–∏–Ω—á–∏–∫–æ–º")
            message_id = write_msg(user_id, f"–°–∫–∞–Ω–∏—Ä—É—é...")
            resid = 0
            activated = False
            off = 0
            while resid < chat_len:
                fh = vk_local.messages.getHistory(peer_id=chat_id, offset = resid, count = 200)
                friend_history = fh['items']
                resid += 200
                for index in friend_history:
                    off += 1
                    if index['from_id'] == user_id and index['text'] != '':
                        last_message = index['text']
                        if index['text'] == '2':
                            is_two = True
                            activated = True
                        elif ord(index['text'][0]) in [10084, 128140] or index['text'] == '1':
                            activated = True
                            is_two = False
                            is_liked = True
                            is_two = False
                        elif index['text'][0] in ['üëé', '3']:
                            activated = True
                            is_two = False
                            is_liked = False
                            is_two = False
                        else:
                            activated = False
                            is_two = False
                    elif activated == True:
                        if is_two == True:
                            if index['text'][:31] == "–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞":
                                is_liked = False
                            else:
                                is_liked = True
                        for ind in index['attachments']:
                            if ind['type'] == 'photo':
                                siz = []
                                for iin in ind['photo']['sizes']:
                                    siz.append(iin['height'])
                                maxx = max(siz)
                                for iin in ind['photo']['sizes']:
                                    if iin['height'] == maxx:
                                        imurl = iin['url']
                                        break
                                response = str(requests.head(imurl))
                                if response == '<Response [200]>':
                                    img = urllib.request.urlopen(imurl).read()
                                if is_liked == True:
                                    with open(lpath + str(likes_count) + ".png", "wb") as f:
                                        f.write(img)
                                    likes_count += 1
                                else:
                                    with open(dpath + str(dislikes_count) + ".png", "wb") as f:
                                        f.write(img)
                                    dislikes_count += 1
                        activated = False
                    elif got_self_info == False:
                        if index['text'] in ["–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", "–ö–æ–≥–æ —Ç–µ–±–µ –Ω–∞–π—Ç–∏?\n\n1. –î–µ–≤—É—à–∫—É.\n2. –ü–∞—Ä–Ω—è.\n3. –í—Å–µ —Ä–∞–≤–Ω–æ."]:
                            if self_info_not_complited == False:
                                l_off = off - 1
                                l_index_from_id = index['from_id']
                                while l_off > -1 and not(l_index_from_id == user_id) and not(last_message in ['1', "–î–µ–≤—É—à–∫–∏", '2', "–ü–∞—Ä–Ω–∏", '3', "–ù–µ –≤–∞–∂–Ω–æ"]):
                                    l_off -= 1
                                    local_message = vk_local.messages.getHistory(peer_id=chat_id, offset = l_off, count = 1)
                                    last_message = local_message["text"]
                                    l_index_from_id = local_message["from_id"]
                                if l_off == -1:
                                    self_info_not_complited = True
                                else:
                                    if last_message in ['1', "–î–µ–≤—É—à–∫–∏"]:
                                        is_friend_boy = False
                                        self_info_not_complited = False
                                    elif last_message in ['2', "–ü–∞—Ä–Ω–∏"]:
                                        is_friend_boy = True
                                        self_info_not_complited = False
                                    elif last_message in ['3', "–ù–µ –≤–∞–∂–Ω–æ"]:
                                        is_friend_boy = 0
                                        self_info_not_complited = False
                        elif "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏" in index['text']:
                            if last_message == "" or last_message == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç" or last_message == '1':
                                self_info_not_complited = True
                            else:
                                my_form_text = last_message
                                self_info_not_complited == False
                        elif index['text'] == "–¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º":
                            if self_info_not_complited == False:
                                l_off = off - 1
                                l_index_from_id = index['from_id']
                                while l_off > -1 and not(l_index_from_id == user_id) and not(last_message in ['1', "–Ø –¥–µ–≤—É—à–∫–∞", '2', "–Ø –ø–∞—Ä–µ–Ω—å"]):
                                    l_off -= 1
                                    local_message = vk_local.messages.getHistory(peer_id=chat_id, offset = l_off, count = 1)
                                    last_message = local_message["text"]
                                    l_index_from_id = local_message["from_id"]
                                if l_off != -1:
                                    if last_message in ['1', "–Ø –¥–µ–≤—É—à–∫–∞"]:
                                        is_boy = False
                                        got_self_info = True
                                        self_info_not_complited = False
                                    elif last_message in ['2', "–Ø –ø–∞—Ä–µ–Ω—å"]:
                                        is_boy = False
                                        got_self_info = True
                                        self_info_not_complited = False
                vk.method('messages.edit', {'message_id': message_id, 'peer_id': user_id, 'user_id': user_id, 'message': f"–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª {min(resid, chat_len)} –∏–∑ {chat_len} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—à—ë–ª {likes_count} –ª–∞–π–∫–æ–≤ –∏ {dislikes_count} –¥–∏–∑–ª–∞–π–∫–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."})
    user_settings["my_form_text"] = my_form_text
    user_settings["is_boy"] = is_boy
    if is_friend_boy == 0:
        if is_boy == None:
            is_boy = True
        user_settings["is_friend_boy"] = not(is_boy)
    else:
        user_settings["is_friend_boy"] = is_friend_boy
        if is_boy == None:
            is_boy = not(is_friend_boy)
    with open(user_path + '\\settings.json', 'w') as f:
        f.write(json.dumps(user_settings))
    min_class = min(likes_count, dislikes_count)
    if likes_count == 0 and dislikes_count == 0:
        user_settings["model"] = model_girls
        with open(user_path + '\\settings.json', 'w') as f:
            f.write(json.dumps(user_settings))
        return "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫"
    if min_class < min_for_class:
        user_settings["model"] = model_girls
        with open(user_path + '\\settings.json', 'w') as f:
            f.write(json.dumps(user_settings))
        return f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–Ω–∫–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ {min_for_class} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∏ —Å—Ç–æ–ª—å–∫–æ –∂–µ –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö. –£ –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ {likes_count} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∏ {dislikes_count} –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫"
    write_msg(user_id, f"–ü–æ–ª—É—á–µ–Ω–æ {likes_count} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∏ {dislikes_count} –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –£–¥–∞–ª—è—é –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∞–Ω–∫–µ—Ç—ã")
    # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    Tk().withdraw()
    list_of_files = os.walk(path)
    unique_files = dict()
    counter = 0
    for root, _, files in list_of_files:
        for file in tqdm(files):
            file_path = Path(os.path.join(root, file))
            Hash_file = hashlib.md5(open(file_path, 'rb').read()).hexdigest()
            if Hash_file not in unique_files:
                unique_files[Hash_file] = file_path
            else:
                counter += 1
                os.remove(file_path)
    likes_count = sum(1 for _ in Path(lpath).iterdir())
    dislikes_count = sum(1 for _ in Path(dpath).iterdir())
    if likes_count < min_for_class or dislikes_count < min_for_class:
        user_settings["model"] = model_girls
        with open(user_path + '\\settings.json', 'w') as f:
            f.write(json.dumps(user_settings))
        return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ {min_for_class} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∏ —Å—Ç–æ–ª—å–∫–æ –∂–µ –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö. –£ –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ –æ–∞—Å—Ç–∞–ª–æ—Å—å {likes_count} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∏ {dislikes_count} –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫"
    write_msg(user_id, f"–û—Å—Ç–∞–ª–æ—Å—å {likes_count} –ø—Ä–æ–ª–∞–π–∫–∞–Ω—ã—Ö –∏ {dislikes_count} –∑–∞–¥–∏–∑–ª–∞–π–∫–∞–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è. –≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è.")
    if likes_count < dislikes_count:
        delpath = dpath
        max_c = dislikes_count
    else:
        delpath = lpath
        max_c = likes_count
    os.mkdir(train_path + "val\\")
    os.mkdir(train_path + "val\\like\\")
    os.mkdir(train_path + "val\\dislike\\")
    write_msg(user_id, f"–£–¥–∞–ª—è—é –ª–∏—à–Ω–µ–µ, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω—è—Ç—å –∫–ª–∞—Å—Å—ã (–¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è)")
    j = max_c - 1
    del_count = max_c - min_class
    f_name = delpath + str(j) + ".png"
    for _ in range(del_count):
        while os.path.isfile(f_name) == False:
            j -= 1
            f_name = delpath + str(j) + ".png"
        os.remove(delpath + str(j) + ".png")
    #–î–µ–ª—é –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω—É—é –∏ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–æ—á–Ω—É—é
    move_count = min_class // val_k
    list_of_files = os.walk(lpath)
    counter = 0
    for root, _, files in list_of_files:
        for file in tqdm(files):
            if counter < move_count:
                file_path = Path(os.path.join(root, file))
                new_file_path = Path(os.path.join(train_path + "val\\like\\", file))
                shutil.move(file_path, new_file_path)
                counter += 1
            else:
                break
    list_of_files = os.walk(dpath)
    counter = 0
    for root, _, files in list_of_files:
        for file in tqdm(files):
            if counter < move_count:
                file_path = Path(os.path.join(root, file))
                new_file_path = Path(os.path.join(train_path + "val\\dislike\\", file))
                shutil.move(file_path, new_file_path)
                counter += 1
            else:
                break
    write_msg(user_id, f"–ü–æ–ª—É—á–µ–Ω–æ {min_class} –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∞–Ω–∫–µ—Ç –∏ {min_class} –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç, –Ω–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ —á–∞—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    message_id = write_msg(user_id, "–û–±—É—á–∞—é—Å—å...")
    best_acc = train_model(user_path, message_id, user_id, vk)
    with open(user_path + "\\status.txt", "w") as f:
        f.write('1')
    best_acc *= 100
    user_settings["model"] = user_path + "\\classifier.pth"
    with open(user_path + '\\settings.json', 'w') as f:
        f.write(json.dumps(user_settings))
    if best_acc < 55:
        return f"–í–∞—à–∞ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞, –æ–¥–Ω–∞–∫–æ –µ—ë —Ç–æ—á–Ω–æ—Å—Ç—å -- {best_acc:.2f}%, –∞ —ç—Ç–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏. –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ü–µ–Ω–∏—Ç—å –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø–æ–ø–∞–¥–∞–ª–∏ –≤ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏, —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ —á–∞—Ç–∞ —Å –í–∏–Ω—á–∏–∫–æ–º"
    else:
        return f"–í–∞—à–∞ –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞. –ü–æ–ª—É—á–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: {best_acc:.2f}%. –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–∫–æ–ª–æ 50% —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å.\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ–ª—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"!–ø–æ–º–æ—â—å\". –¢–∞–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç\". –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ \"!—Å—Ç–∞—Ä—Ç\""

def scan_messages_from_vinchik(longpoll_user, vk_user):
    for event in longpoll_user.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
                if event.peer_id == -91050183:
                    print('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –í–∏–Ω—á–∏–∫–∞:')
                    print(event.text)
                    message = vk_user.method('messages.getHistory', {'peer_id': -91050183, 'offset': 0, 'count': 1})["items"][0]
                    return message

def send_message_by_user(vk_user, chat_id, message):
    return vk_user.method('messages.send', {'random_id': 0, 'user_id': chat_id, 'message': message})

def operator_check(need_param, got_value):
    if need_param[1] == '=':
        need_value = int(need_param[2:])
        if need_param[0] == '=':
            return True if got_value == need_value else False
        elif need_param[0] == '!':
            return True if got_value != need_value else False
        elif need_param[0] == '>':
            return True if got_value >= need_value else False
        elif need_param[0] == '<':
            return True if got_value <= need_value else False
    else:
        need_value = int(need_param[1:])
        if need_param[0] == '>':
            return True if got_value > need_value else False
        elif need_param[0] == '<':
            return True if got_value < need_value else False

def check_black_white_lists(is_black_list, list_params, message):
    if list_params == []:
        return True
    else:
        pos = message["text"].find("\n")
        if pos == -1:
            description = ""
            form_desc = message["text"]
        else:
            form_desc = message["text"][:message["text"].find("\n")]
            description = message["text"][message["text"].find("\n") + 1:]
        photo = message["photo"]
        pos = form_desc.rfind(",")
        distance = form_desc[pos + 2:]
        form_desc = form_desc[:pos]
        city = ""
        radius = -1
        if distance[0] == 'üìç':
            pos = distance.find(' ')
            if pos == -1:
                radius = int(distance[1:distance.find('–ö')]) * 1000
            else:
                radius = int(distance[1:pos])
        else:
            city = distance
        pos = form_desc.rfind(",")
        age = int(form_desc[pos + 2:])
        for param in list_params:
            if "–≤–æ–∑—Ä–∞—Å—Ç" in param:
                if operator_check(param["–≤–æ–∑—Ä–∞—Å—Ç"], age) == is_black_list:
                    return False
            elif "—Ä–∞–¥–∏—É—Å" in param:
                if radius != -1 and operator_check(param["—Ä–∞–¥–∏—É—Å"], radius) == is_black_list:
                    return False
            elif "–≥–æ—Ä–æ–¥" in param:
                if city != "":
                    if param["–≥–æ—Ä–æ–¥"][1] == '!':
                        if param["–≥–æ—Ä–æ–¥"][2:-1].upper() != city.upper() == is_black_list:
                            return False
                    else:
                        if param["–≥–æ—Ä–æ–¥"][1:-1].upper() == city.upper() == is_black_list:
                            return False
            elif "—Ñ–æ—Ç–æ" in param:
                if param["—Ñ–æ—Ç–æ"] == "–µ—Å—Ç—å":
                    if photo != None == is_black_list:
                        return False
                else:
                    if photo == None == is_black_list:
                        return False
            elif "–æ–ø–∏—Å–∞–Ω–∏–µ" in param:
                if param["—Ñ–æ—Ç–æ"] == "–µ—Å—Ç—å":
                    if description != "" == is_black_list:
                        return False
                else:
                    if description == "" == is_black_list:
                        return False
            else:
                if param[0] == '!':
                    if param[2:-1] in message["text"] == is_black_list:
                        return False
                else:
                    if param[1:-1] in message["text"] == is_black_list:
                        return False

def check_all_cond(message, user_settings):
    is_photo_in_form = False
    if "attachments" in message:
        for attachment in message["attachments"]:
            if attachment["type"] == "photo":
                is_photo_in_form = True
                siz = []
                for iin in attachment['photo']['sizes']:
                    siz.append(iin['height'])
                maxx = max(siz)
                for iin in attachment['photo']['sizes']:
                    if iin['height'] == maxx:
                        imurl = iin['url']
                        break
                response = str(requests.head(imurl))
                if response == '<Response [200]>':
                    photo = urllib.request.urlopen(imurl).read()
                    message["photo"] = photo
    if is_photo_in_form == False:
        message["photo"] = None
    if check_black_white_lists(True, user_settings["BL"], message) == False: #–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        return False, -1
    if check_black_white_lists(False, user_settings["WL"], message) == False: #–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        return False, -1
    if user_settings["autolike"] == 100 and user_settings["autodislike"] == 100 and user_settings["autopilot"] == -1 or not(is_photo_in_form):
        return True, -1
    else:
        prob = get_neural_predict(user_settings["model"], photo)
        if user_settings["autopilot"] != -1:
            return (False, prob) if prob < user_settings["autopilot"] else (True, prob)
        else:
            if user_settings["autolike"] != 100 and user_settings["autolike"] < prob:
                return True, prob
            if user_settings["autodislike"] != 100 and user_settings["autodislike"] < prob:
                return False, prob
            else: 
                return True, prob

def work_in_Vinchik(user_id, chat_id): #–§—É–Ω–∫—Ü–∏—è, –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Å–µ–∞–Ω—Å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ –≤ –±–µ—Å–µ–¥–µ —Å –±–æ—Ç–æ–º –í–∏–Ω—á–∏–∫–∞
    likes_count = 0
    dislikes_count = 0
    pr = 0
    user_path = "Forms\\" + str(user_id)
    with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
        user_settings = json.load(f)
    with open(user_path + '\\token.txt', 'r') as f:
        token = f.read()
    vk_user = vk_api.VkApi(token = token, captcha_handler = captcha_handler)
    longpoll_user = VkLongPoll(vk_user)
    message = vk_user.method('messages.getHistory', {'peer_id': chat_id, 'offset': 0, 'count': 1})["items"][0]
    orig_m = html.unescape(message["text"])
    message["text"] = orig_m.upper()
    if message["text"][:24] == "–°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –õ–ê–ô–ö–û–í –ó–ê ":
        send_message_by_user(vk_user, chat_id, "1")
        message = scan_messages_from_vinchik(longpoll_user, vk_user)
        orig_m = html.unescape(message["text"])
        message["text"] = orig_m.upper()
    pos = message["text"].find("\n")
    if pos == -1:
        first_string = message["text"]
    else:
        first_string = message["text"][:pos]
    did_reply = False
    while message["text"][:24] != "–°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –õ–ê–ô–ö–û–í –ó–ê ":
        d_num = '3'
        while first_string.count(",") != 2:
            offset = 0
            pos = message["text"].find("\n")
            if pos == -1:
                first_string = message["text"]
                another_user_form_text = ""
            else:
                first_string = message["text"][:pos]
                another_user_form_text = orig_m[pos + 1:]
                if first_string == "1. –°–ú–û–¢–†–ï–¢–¨ –ê–ù–ö–ï–¢–´.":
                    offset = 1
                    message = vk_user.method('messages.getHistory', {'peer_id': chat_id, 'offset': offset, 'count': 1})["items"][0]
                    orig_m = html.unescape(message["text"])
                    message["text"] = orig_m.upper()
                    pos = message["text"].find("\n")
                    first_string = message["text"][:pos]
                    another_user_form_text = orig_m[pos + 1:]
                if "–ö–û–ú–£-–¢–û –ü–û–ù–†–ê–í–ò–õ–ê–°–¨ –¢–í–û–Ø –ê–ù–ö–ï–¢–ê" in first_string:
                    d_num = '2'
                    message["text"] = message["text"][pos + 2:]
                    first_string = ",,"
                elif first_string in ["–í–†–ï–ú–Ø –ü–†–û–°–ú–û–¢–†–ê –ê–ù–ö–ï–¢–´ –ò–°–¢–ï–ö–õ–û, –î–ï–ô–°–¢–í–ò–ï –ù–ï –í–´–ü–û–õ–ù–ï–ù–û.", "–ù–ê–®–õ–ò –ö–û–ï-–ö–û–ì–û –î–õ–Ø –¢–ï–ë–Ø ;) –ó–ê–ö–ê–ù–ß–ò–í–ê–ô –° –í–û–ü–†–û–°–û–ú –í–´–®–ï –ò –£–í–ò–î–ò–®–¨ –ö–¢–û –≠–¢–û"]:
                    message["text"] = message["text"][pos + 2:]
                    first_string = ",,"
                while first_string[:53] == "–ï–°–¢–¨ –í–ó–ê–ò–ú–ù–ê–Ø –°–ò–ú–ü–ê–¢–ò–Ø! –î–û–ë–ê–í–õ–Ø–ô –í –î–†–£–ó–¨–Ø - VK.COM/ID":
                    offset += 1
                    message = vk_user.method('messages.getHistory', {'peer_id': chat_id, 'offset': offset, 'count': 1})["items"][0]
                    orig_m = html.unescape(message["text"])
                    message["text"] = orig_m.upper()
                    pos = message["text"].find("\n")
                    if pos == -1:
                        first_string = message["text"]
                    else:
                        first_string = message["text"][:pos]
                did_reply = False
                while offset > 1:
                    did_reply = True
                    offset -= 1
                    message = vk_user.method('messages.getHistory', {'peer_id': chat_id, 'offset': offset, 'count': 1})["items"][0]
                    pos = message["text"].find("\n")
                    friend_id = int(message["text"][:pos][53:])
                    message["text"] = message["text"][pos + 2:]
                    orig_m = html.unescape(message["text"])
                    message["text"] = orig_m.upper()
                    pos = message["text"].find("\n")
                    if pos == -1:
                        first_string = message["text"]
                    else:
                        first_string = message["text"][:pos]
                    another_user_form_text = orig_m[pos + 1:]
                    if user_settings["reply"]["message"]["friend"] == True:
                        if user_settings["reply"]["message"]["GPT"] == True:
                            message_to_another_user = Gen_message_by_GPT(token = openAI_token, to_friends = True, my_form_text = user_settings["my_form_text"], another_user_form_text = another_user_form_text, is_boy = user_settings["is_boy"], is_friend_boy = user_settings["is_friend_boy"])
                            try:
                                vk_user.method('friends.add', {'user_id': friend_id, 'text': message_to_another_user})
                            except:
                                try:
                                    vk_user.method('messages.send', {'random_id': 0, 'user_id': friend_id, 'message': message_to_another_user})
                                    write_msg(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é vk.com/id{friend_id}, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è.")
                                except:
                                    write_msg(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é vk.com/id{friend_id} –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ. –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã —É –Ω–µ–≥–æ –≤ –ß–°.")
                        else:
                            if user_settings["reply"]["message"]["text"] == "":
                                try:
                                    vk_user.method('friends.add', {'user_id': friend_id})
                                except:
                                    write_msg(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é vk.com/id{friend_id} –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã —É –Ω–µ–≥–æ –≤ –ß–°.")
                            else:
                                message_to_another_user = user_settings["reply"]["message"]["text"]
                                try:
                                    vk_user.method('friends.add', {'user_id': friend_id, 'text': message_to_another_user})
                                except:
                                    try:
                                        vk_user.method('messages.send', {'random_id': 0, 'user_id': friend_id, 'message': message_to_another_user})
                                        write_msg(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é vk.com/id{friend_id}, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è.")
                                    except:
                                        write_msg(user_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é vk.com/id{friend_id} –ø–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ. –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∂–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–∫—Ä—ã—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –≤—ã —É –Ω–µ–≥–æ –≤ –ß–°.")
            if first_string.count(",") != 2 and did_reply == False:
                send_message_by_user(vk_user, chat_id, "1")
                message = scan_messages_from_vinchik(longpoll_user, vk_user)
                orig_m = html.unescape(message["text"])
                message["text"] = orig_m.upper()
                pos = message["text"].find("\n")
                if pos == -1:
                    first_string = message["text"]
                else:
                    first_string = message["text"][:pos]
        cond, p = check_all_cond(message, user_settings)
        if p != -1:
            pr += p
        if cond == True:
            send_message = "1"
            likes_count += 1
        else:
            send_message = d_num
            dislikes_count += 1
        send_message_by_user(vk_user, chat_id, send_message)
        message = scan_messages_from_vinchik(longpoll_user, vk_user)
        orig_m = html.unescape(message["text"])
        message["text"] = orig_m.upper()
        pos = message["text"].find("\n")
        if pos == -1:
            first_string = message["text"]
        else:
            first_string = message["text"][:pos]
    if user_settings["stat"] == True:
        if likes_count == 0 and dislikes_count == 0:
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ª–∞–π–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤"
        else:
            if dislikes_count == 0:
                d = 0
            else:
                d = round(likes_count / dislikes_count, 2)
            avg_p = round(pr / (likes_count + dislikes_count), 2)
            if d > 1.2:
                return f"–°–µ–∞–Ω—Å –∞–≤—Ç–æ–ª–∞–π–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {likes_count} –ª–∞–π–∫–æ–≤ –∏ {dislikes_count} –¥–∏–∑–ª–∞–π–∫–æ–≤\n–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∫ –¥–∏–∑–ª–∞–π–∫–∞–º —Ä–∞–≤–Ω–æ {d}, –ª–∞–π–∫–∏ —Å—Ç–∞–≤—è—Ç—Å—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ, —Ä—É–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞\"\n–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç, –ø–æ –º–Ω–µ–Ω–∏—é –Ω–µ—Ä–æ–Ω–∫–∏, —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {avg_p}"
            else:
                return str(f"–°–µ–∞–Ω—Å –∞–≤—Ç–æ–ª–∞–π–∫–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {likes_count} –ª–∞–π–∫–æ–≤ –∏ {dislikes_count} –¥–∏–∑–ª–∞–π–∫–æ–≤\n–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∫ –¥–∏–∑–ª–∞–π–∫–∞–º —Ä–∞–≤–Ω–æ {d}\n–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç, –ø–æ –º–Ω–µ–Ω–∏—é –Ω–µ—Ä–æ–Ω–∫–∏, —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {avg_p}")

def read_token(user_id, token):
    vk_session = vk_api.VkApi(token = token, captcha_handler=captcha_handler)
    vk_session._auth_token()
    vk_local = vk_session.get_api()
    v_dialog_len = get_dialogs(vk_local, Vinchik_ID)
    e_dialog_len = get_dialogs(vk_local, Evil_corp_ID)
    with open("Forms\\" + str(user_id) + "\\token.txt", "w") as f:
        f.write(token)
    user_path = "Forms\\" + str(user_id)
    with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
        user_settings = json.load(f)
    if v_dialog_len == 0 and e_dialog_len == 0:
        user_settings["model"] = model_girls
        with open(user_path + '\\settings.json', 'w') as f:
            f.write(json.dumps(user_settings))
        return f"–£ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∞–π–≤–∏–Ω—á–∏–∫ –∏–ª–∏ —Å –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π –∑–ª–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫. –î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ —á–∞—Ç–µ —Å –ø–∏–Ω—á–∏–∫–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"!–æ–±—É—á–∏—Ç—å\""
    else:
        count = v_dialog_len + e_dialog_len
        if count < min_for_class * 2:
            user_settings["model"] = model_girls
            with open(user_path + '\\settings.json', 'w') as f:
                f.write(json.dumps(user_settings))
            return f"–î–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∞–ª–æ–≤–∞—Ç–æ, —É –≤–∞—Å –≤—Å–µ–≥–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º... –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö–æ—Ç—è–±—ã –ø–æ {min_for_class} –ª–∞–π–∫–æ–≤ –∏ {min_for_class} –¥–∏–∑–ª–∞–π–∫–æ–≤ –≤ —Å—É–º–º–µ. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫. –î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–∫–∏ –Ω–∞–∫–æ–ø–∏—Ç–µ –æ—Ü–µ–Ω—ë–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ —á–∞—Ç–µ —Å –ø–∏–Ω—á–∏–∫–æ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É \"!–æ–±—É—á–∏—Ç—å\""
        else:
            write_msg(user_id, f"–£ –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º. –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑")
            return get_dataset(user_id, vk_local, v_dialog_len, e_dialog_len, user_path, user_settings)

class VkBot:
    def __init__(self, user_id):
        self._USER_ID = user_id
        self._USERNAME = self._get_user_name_from_vk_id(user_id)

    def _get_user_name_from_vk_id(self, user_id):
        request = requests.get("https://vk.com/id" + str(user_id))
        bs = bs4.BeautifulSoup(request.text, "html.parser")
    
        user_name = self._clean_all_tag_from_str(bs.findAll("title")[0])
    
        return user_name.split()[0]

    def get_token(self, user_id, token):
        token = token[token.find("access_token=") + 13:]
        if "&" in token:
            token = token[:token.find("&")]
        write_msg(user_id, "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –ø–æ–ª—É—á–∞—Å–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º. –ë–æ—Ç –±—É–¥–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—á—Ç—ë—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ –∏ –Ω–µ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç, —Ç–∞–∫ –≤—ã —Ç–æ–ª—å–∫–æ –∑–∞–º–µ–¥–ª–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞")
        return read_token(user_id, token)
     # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç—ç–≥–æ–≤
 
    @staticmethod
    def _clean_all_tag_from_str(string_line):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ stringLine –æ—Ç —Ç—ç–≥–æ–≤ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º—ã—Ö
        :param string_line: –û—á–∏—â–∞–µ–º–∞—è —Å—Ç—Ä–æ–∫–∞
        :return: –æ—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        result = ""
        not_skip = True
        for i in list(string_line):
            if not_skip:
                if i == "<":
                    not_skip = False
                else:
                    result += i
            else:
                if i == ">":
                    not_skip = True
    
        return result

    def new_message(self, user_id, message):
        msg = html.unescape(message).upper()
        user_path = "Forms\\" + str(user_id)
        # –ù–∞—á–∞—Ç—å
        if "–ù–ê–ß–ê–¢–¨" in msg[:7]:
            if os.path.exists(user_path) == False:
                os.mkdir(user_path)
                with open(user_path + "\\status.txt", "w") as f:
                    f.write('0')
                with open(user_path + '\\settings.json', 'w') as f:
                    f.write(json.dumps(default_settings))
                return f"–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ª–∏—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω—É–∂–¥ –±–æ—Ç–∞. –ï—Å–ª–∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç–µ—Å—å –∑–∞ —Å–≤–æ—é –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–æ–≥–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏ –±–æ—Ç –ø–æ—Ç–µ—Ä—è–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://onl.bz/VTTkFYc, –∑–∞—Ç–µ–º –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"—Ä–∞–∑—Ä–µ—à–∏—Ç—å\" –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞—Å –ø–µ—Ä–µ–∫–∏–Ω—É–ª–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç"
            else:
                with open(user_path + "\\status.txt", "r") as f:
                    status = f.read()
                if status == '0':
                    return f"–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ª–∏—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –Ω—É–∂–¥ –±–æ—Ç–∞. –ï—Å–ª–∏ –±–µ—Å–ø–æ–∫–æ–∏—Ç–µ—Å—å –∑–∞ —Å–≤–æ—é –±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç—å, —Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–æ–≥–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏ –±–æ—Ç –ø–æ—Ç–µ—Ä—è–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://onl.bz/VTTkFYc, –∑–∞—Ç–µ–º –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"—Ä–∞–∑—Ä–µ—à–∏—Ç—å\" –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤–∞—Å –ø–µ—Ä–µ–∫–∏–Ω—É–ª–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç"
                else:
                    return "–°–º–æ—Ç—Ä—é —Ç—ã —É–∂–µ –æ–±—É—á–∞–ª –º–æ–¥–µ–ª—å. –ñ–µ–ª–∞–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç–∞—Ä–æ–π –∏–ª–∏ —É–∂–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–∫—É—Å—ã?) –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π, –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–æ–∂–Ω–æ –≤–≤–µ–¥—è !–ø–æ–º–æ—â—å). –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å -- –≤–≤–µ–¥–∏ !–ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å"
        # –û–±—É—á–∏—Ç—å:
        if "–û–ë–£–ß–ò–¢–¨" in msg[:8]:
            write_msg(user_id, "–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–æ–±—É—á–∏–º! –ü–æ–¥–æ–∂–¥–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∫–∞ —Å–Ω–æ–≤–∞ —Å–æ–±–µ—Ä—ë–º –¥–∞–Ω–Ω—ã–µ!")
            with open("Forms\\" + str(user_id) + "\\token.txt", "r") as f:
                token = f.read()
            read_token(user_id, token)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        elif "https://oauth.vk.com/blank.html#access_token=vk1.a." in message:
            return self.get_token(user_id, message)
    
        # –ü–æ–º–æ—â—å
        elif "–ü–û–ú–û–©–¨" in msg[:7]:
            pos = msg.find(' ')
            if pos > 0:
                arg = msg[pos + 1:]
                if "–ü–û–ú–û–©–¨" in arg[:7]:
                    return "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞. –ú–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑. –í –∫–∞—á–µ—Ç–≤—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫–∏—Ö –∫–∞–∫ \"!–ù–∞—á–∞—Ç—å\", \"!–ü–æ–º–æ—â—å\", \"!–û–±—É—á–∏—Ç—å\", \"!–°—Ç–∞—Ä—Ç\", \"!–°—Ç–æ–ø\", \"!–ú–æ–¥–µ–ª—å\", \"!–ß–°\", \"!–ë–°\", \"!–°–æ–±—â–µ–Ω–∏–µ\", \"!–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\", \"!–ê–≤—Ç–æ–ª–∞–π–∫\", \"!–ê–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫\", \"!–ê–≤—Ç–æ–ø–∏–ª–æ—Ç\". –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤—ã–¥–∞—ë—Ç –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–µ"
                elif "–ù–ê–ß–ê–¢–¨" in arg[:7]:
                    return "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –±–æ—Ç—É –≤–ø–µ—Ä–≤—ã–µ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å. –ò–ª–∏, –µ—Å–ª–∏ –≤—ã —É–∂–µ –æ–±—É—á–∞–ª–∏ –º–æ–¥–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à—É, —É–∂–µ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"
                elif "–û–ë–£–ß–ò–¢–¨" in arg[:8]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–∞—è –æ–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞. –û–Ω —Å–∏–±–∏—Ä–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –í–∏–Ω—á–∏–∫–æ–º –∏ –ö–æ—Ä–ø–æ—Ä–∞—Ü–∏–µ–π –∑–ª–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—É—á–µ–Ω–∏. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–±—É—á–∞–ª–∏ –º–æ–¥–µ–ª—å, –±–æ—Ç –ø–µ—Ä–µ–æ–±—É—á–∏—Ç –µ—ë –∑–∞–Ω–æ–≤–æ. "
                elif "–°–¢–ê–†–¢" in arg[:6]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º. –î–ª—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥ \"–º–æ–¥–µ–ª—å\", \"—Å–æ–æ–±—â–µ–Ω–∏–µ\", \"—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\", \"–ß–°\", \"–ë–°\", \"–∞–≤—Ç–æ–ª–∞–π–∫\", \"–∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫\" –∏ \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç\". –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \"—Å—Ç–æ–ø\". –î–ª—è –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –í–ö —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º, –Ω–æ —ç—Ç–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è. –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞."
                elif "–°–¢–û–ü" in arg[:5]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∞—è —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º, –µ—Å–ª–∏ –±–æ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–∞–π–∫–∞–µ—Ç –∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ï—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –Ω–µ–∑–∞–º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ, —á—Ç–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –í–ö —Ç–æ–∫–µ–Ω, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º. –í –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞."
                elif "–ú–û–î–ï–õ–¨" in arg[:7]:
                    return "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏. –ï—Å—Ç—å —É–∂–µ –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–Ω–∫–µ—Ç –¥–µ–≤—É—à–µ–∫. –≠—Ç–∞ –º–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç –º–æ–¥–µ–ª–∏, –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–∞ —Ç–≤–æ–∏—Ö –≤–∫—É—Å–∞—Ö. –ï—Å–ª–∏ —Ç—ã –æ–±—É—á–∞–ª –º–æ–¥–µ–ª—å, —Ç–æ –æ–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é.\n–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–º–µ–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞:\n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n\"–¥–µ–≤—É—à–∫–∏\" -- –≥–æ—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫\n\"–º–æ—è\" -- –º–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö –≤–∫—É—Å–∞—Ö. –≠—Ç—É –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –æ–±—É—á–∞–ª–∏ —Å–≤–æ—é –º–æ–¥–µ–ª—å. –î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É \"!–æ–±—É—á–∏—Ç—å\""
                elif "–ß–°" in arg[:3]:
                    return "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, —Ç.–µ. –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫ –≤—Å–µ–º –∞–Ω–∫–µ—Ç–∞–º, –∫–æ—Ç—Ä—ã–µ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ–¥ —É—Å–ª–æ–≤–∏—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã:\n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏–∫–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–≥–∏—è \"!–ß–° –ø–æ–∫–∞–∑–∞—Ç—å\"\n\"–æ—á–∏—Å—Ç–∏—Ç—å\" -- –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏–∫–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \"!–ß–° –æ—á–∏—Å—Ç–∏—Ç—å\"\n–°–ª–µ–¥—É—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏. –ü—Ä–∏–º–µ—Ä –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π \"!–ß–° –≤–æ–∑—Ä–∞—Å—Ç<=16, —Ä–∞–¥–∏—É—Å>2000, –≥–æ—Ä–æ–¥ –¥—Ä—É–≥–æ–π, –æ–ø–∏—Å–∞–Ω–∏–µ==\"–µ—Å—Ç—å –ø–∞—Ä–µ–Ω—å\"\", \"–º–Ω–µ 13\", \"–º–Ω–µ 14\". –¢–æ–∂–µ —Å–∞–º–æ–µ –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∞—Ä–≥—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è:\n\"!–ß–° –≤–æ–∑—Ä–∞—Å—Ç<=16\"\n\"!–ß–° —Ä–∞–¥–∏—É—Å>2000\"\n\"!–ß–° \"–µ—Å—Ç—å –ø–∞—Ä–µ–Ω—å\"\"\n\"–≤–æ–∑—Ä–∞—Å—Ç\" -- —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: –ø–æ—Å–ª–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å \"<\", \"<=\", \"!=\", \"==\", \">=\" –∏–ª–∏ \">\" –∏ –ø–æ—Å–ª–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ –≤–æ–∑—Ä–∞—Å—Ç. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \"!–ß–° –≤–æ–∑—Ä–∞—Å—Ç==16\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞—Ç—å –≤—Å–µ—Ö, —á–µ–π –≤–æ–∑—Ä–∞—Å—Ç –≤ –∞–Ω–∫–µ—Ç–µ —Ä–∞–≤–µ–Ω 16 –≥–æ–¥–∞–º. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å –¥—Ä—É–≥–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n\"—Ä–∞–¥–∏—É—Å\" -- –∞—Ä–≥—É–º–µ–Ω—Ç, –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è \"<\", \"<=\", \"!=\", \"==\", \">=\" –∏–ª–∏ \">\" –∏ –ø–æ—Å–ª–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∫–µ—Ç, –≤ –æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω —Ä–∞–¥–∏—É—Å, –Ω–µ –≥–æ—Ä–æ–¥! –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–µ—Ç—Ä–∞—Ö! –í 1 –∫–∏–ª–æ–º–µ—Ç—Ä–µ 1000 –º–µ—Ç—Ä–æ–≤!\n\"–≥–æ—Ä–æ–¥\" -- –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≥–æ—Ä–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∫–µ—Ç, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, –Ω–µ —Ä–∞–¥–∏—É—Å. –°—É—â–µ—Å—Ç–≤—É—é—Ç —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \"!–ß–° –≥–æ—Ä–æ–¥ –º–æ–π\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥, —á—Ç–æ –∏ —É —Ç–µ–±—è. \"!–ß–° –≥–æ—Ä–æ–¥ –¥—Ä—É–≥–æ–π\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥, –Ω–æ –Ω–µ —Ç–æ—Ç, —á—Ç–æ —É —Ç–µ–±—è. \"!–ß–° –≥–æ—Ä–æ–¥==\"–ú–æ—Å–∫–≤–∞\"\" -- –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä \"==\", —Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á—Å–µ–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞—Ç—å —Ç–µ –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"–≥–æ—Ä–æ–¥==\". –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä \"!=\", —Ç–æ–≥–¥–∞ –±—É–¥—É—Ç –¥–∏–∑–ª–∞–π–∫–∞—Ç—å—Å—è –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –ø–æ—Å–ª–µ \"!=\"\n\"—Ñ–æ—Ç–æ\" -- –∞—Ä–≥—É–º–µ–Ω—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ç–æ –≤ –∞–Ω–∫–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \"!–ß–° —Ñ–æ—Ç–æ –Ω–µ—Ç\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ñ–æ—Ç–æ. \"!–ß–° —Ñ–æ—Ç–æ –µ—Å—Ç—å\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–¥–∞–π–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–µ –∑–Ω–∞—é, –∑–∞—á–µ–º —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è...\n\"–æ–ø–∏—Å–∞–Ω–∏–µ\"  -- –∞—Ä–≥—É–º–µ–Ω—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω—ã 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \"!–ß–° –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Ç\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ñ–æ—Ç–æ. \"!–ß–° –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å—Ç—å\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–¥–∞–π–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. \"!–ß–° –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Ç\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è. –ò —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç -- –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ \"==\" –∏ \"!=\" –ø–æ—Å–ª–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"–æ–ø–∏—Å–∞–Ω–∏–µ\". –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ–≤—ã—á–∫–∏ –ø—Ä–∏ —Ç–∞–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: \"!–ß–° –æ–ø–∏—Å–∞–Ω–∏–µ==\"–µ—Å—Ç—å –ø–∞—Ä–µ–Ω—å\"\" -- –∞–≤—Ç–æ–º–∞—á–∏—Ç–µ—Å–∫–∏ –±—É–¥–µ—Ç –¥–∏–∑–ª–∞–π–∫–∞—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ \"==\" –∏ –≤–∑—è—Ç—ã–π –≤ –∫–∞–≤—ã—á–∫–∏. –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º \"!=\", –Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç.\n–¢–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø—Ä–æ—Å—Ç–æ –≤–∑—è—Ç—ã–µ –≤ –∫–∞–≤—ã—á–∫–∏. –¢–æ –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –¥–∏–∑–ª–∞–π–∫–∞—Ç—å—Å—è –∞–Ω–∫–µ—Ç—ã, –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –≤–∑—è—Ç–∞—è –≤ –∫–∞–≤—ã—á–∫–∏. –ü—Ä–∏–º–µ—Ä \"!–ß–° \"13\"\" -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥—É—Ç –¥–∏–∑–ª–∞–π–∫–∞—Ç—å—Å—è –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤–æ –≤—Å—ë–º —Ç–µ–∫—Å—Ç–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ \"13\", –≤–∫–ª—é—á–∞—è, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –≤–æ–∑—Ä–∞—Å—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–æ–±–æ—Ä–æ—Ç, —á—Ç–æ–±—ã –¥–∏–∑–ª–∞–π–∫–∞–ª–∏—Å—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Ç–æ –ø–µ—Ä–µ–¥ –∫–æ–≤—ã—á–∫–∞–º–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä \"!\". –ü—Ä–∏–º–µ—Ä: \"!–ß–° !\"–ª—é–±–ª—é –≥—É–ª—è—Ç—å\"\" -- –ø–æ —Å—É—Ç–∏ –±—É–¥–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–µ \"!–ë–° \"–ª—é–±–ª—é –≥—É–ª—è—Ç—å\"\", —Ç–æ –µ—Å—Ç—å –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞—Ç—å—Å—è –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫–∏ \"–ª—é–±–ª—é –≥—É–ª—è—Ç—å\""
                elif "–ë–°" in arg[:3]:
                    return "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–µ \"!–ß–°\", –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç. –¢–æ –µ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞–µ—Ç —Ç–µ –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º –∫–æ–º–∞–Ω–¥—ã –≤—ã–∑–æ–≤–∏—Ç–µ —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ \"!–ß–°\", –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ"
                elif "–û–¢–í–ï–¢" in arg[:6]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –∑–∞–¥–∞—é—â–∞—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ª–∞–π–∫–Ω—É–ª–∏ –≤–∞—Å (–∏–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–∞—à –ª–∞–π–∫). –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã \"–¥—Ä—É–∑—å—è –¥–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥, GPT\". –í–æ–∑–º–æ–∂–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –ª–∞–π–∫–µ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ.\n\"–Ω–µ—Ç\" -- —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è, —Ç–æ –µ—Å—Ç—å –Ω–∞ \"–¥—Ä—É–∑—å—è –Ω–µ—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Ç\". –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \"!–û—Ç–≤–µ—Ç –Ω–µ—Ç\"\n\"–¥—Ä—É–∑—å—è\" -- –∞—Ä–≥—É–º–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ —Ç–æ, –¥–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –¥—Ä—É–∑—å—è (–∏–ª–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è —É —á–µ–ª–æ–≤–µ–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞) –ª–∞–π–∫–Ω—É–≤—à–µ–≥–æ –≤–∞—Å —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –Ω–µ—Ç. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–∏–º–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω –≤–∞—à —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–∑—å—è, –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ–± —ç—Ç–æ–º. –ü—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è \"!–û—Ç–≤–µ—Ç –¥—Ä—É–∑—å—è –Ω–µ—Ç\" –∏ \"!–æ—Ç–≤–µ—Ç –¥—Ä—É–∑—å—è –¥–∞\" -- –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –¥—Ä—É–∑—å—è (–Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è) –∏ –¥–æ–±–∞–≤–ª—è—Ç—å (–ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è) —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ.\n\"—Å–æ–æ–±—â–µ–Ω–∏–µ\" -- –∞—Ä–≥—É–º–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–º–µ–µ—Ç 2 –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –∫–∞–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∏ –≤–º–µ—Å—Ç–µ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–µ—Ä–≤—ã–π –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç -- \"–¥—Ä—É–≥\", –∫–æ–º–∞–Ω–¥–∞ —Å —ç—Ç–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∏–º–µ–µ—Ç 2 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \"–¥–∞\" –∏ \"–Ω–µ—Ç\". –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\"!–û—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥ –Ω–µ—Ç\" -- –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç \"–¥—Ä—É–∑—å—è\" —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã \"!–û—Ç–≤–µ—Ç\" —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ \"–¥–∞\", —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"—Å–æ–æ–±—â–µ–Ω–∏–µ\", –∞ –æ–Ω –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ \"GPT\", –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä—É—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç \"–¥—Ä—É–≥\" –≤ –ø–æ–∑–∏—Ü–∏–∏ \"–¥–∞\" –æ–∑–Ω–∞—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–æ –∫–∞–∫ –ø—Ä–∏–æ—Ä–∂–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ –≤ –¥—Ä—É–∑—å—è, –∞ –Ω–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ \"—Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥ –Ω–µ—Ç\", —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ —É –í–ö –µ—Å—Ç—å –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º –≤—Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫. –ü–æ—ç—Ç–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã \"—Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥ –¥–∞\" –ø–æ–∑–≤–æ–ª—è—é—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ç–æ—Ç –ª–∏–º–∏—Ç –≤ —É—â–µ—Ä–± –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í—Ç–æ—Ä—ã–º –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"—Å–æ–æ–±—â–µ–Ω–∏–µ\" –∫–æ–º–∞–Ω–¥—ã \"!–æ—Ç–≤–µ—Ç\" –º–æ–≥—É—Ç —Å–ª—É–∂–∏—Ç—å –ª–∏–±–æ \"GPT\" (–ø–∏—Å–∞—Ç—å –±–µ–∑ –∫–æ–≤—ã—á–µ–∫, –ø—Ä–∏–º–µ—Ä: \"!–û—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ GPT\") -- —ç—Ç–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–∞–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ ChatGPT 3.5 –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã –∏ –∞–Ω–∫–µ—Ç—ã –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤—Ä—É—á–Ω—É—é. –¢–µ–∫—Å—Ç —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∏—à–µ—Ç—Å—è –≤ –∫–æ–≤—ã—á–∫–∞—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç \"—Å–æ–æ–±—â–µ–Ω–∏–µ GPT\". –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: \"!–û—Ç–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ \"–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\"\""
                elif "–°–¢–ê–¢–ò–°–¢–ò–ö–ê" in arg[:11]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –Ω–∞—Å—Ç—Ä–∏–≤–∞—é—â–∞—è –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–∞. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ \"–≤–∫–ª\" –∏ \"–≤—ã–∫–ª\". \"!–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∫–ª\" -- –≤—ã–∫–ª—é—á–∞–µ—Ç –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ, \"!–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∫–ª\" -- –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
                elif "–ê–í–¢–û–õ–ê–ô–ö" in arg[:9]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –ª–∞–π–∫–æ–≤ –∞–Ω–∫–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–π—Ä–æ–Ω–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –∫–∞–∫ –Ω—Ä–∞–≤—è—â–∏–µ—Å—è –≤–∞–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é, –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç\" –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100, —Ç.–µ. –≤—ã–∫–ª—é—á–µ–Ω. –í –∫–∞—á–µ—Ç—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: \n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n–ê —Ç–∞–∫–∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 –æ—Ç–≤–µ—á–∞—é—â–µ–µ –∑–∞ —Ç–æ, –ø—Ä–∏ –∫–∞–∫–æ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ª–∞–π–∫–∞ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è –ª–∞–π–∫. –¢–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 100 –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ª–∞–π–∫ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∫–∞–∫ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —á–µ–≥–æ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç, –∞ –∑–Ω–∞—á–∏—Ç –ø—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ª–∞–π–∫ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 0, —Ç–æ –ª–∞–π–∫ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è –≤—Å–µ–º –∞–Ω–∫–µ—Ç–∞–º, —á—Ç–æ —Ç–∞–∫–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞. –†–µ–∫–æ–º–º–µ–Ω–¥—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫–æ–ª–æ 50-—Ç–∏."
                elif "–ê–í–¢–û–î–ò–ó–õ–ê–ô–ö" in arg[:12]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∏–∑–ª–∞–π–∫–æ–≤ –∞–Ω–∫–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–π—Ä–æ–Ω–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞ –∫–∞–∫ –Ω–µ–Ω—Ä–∞–≤—è—â–∏–µ—Å—è –≤–∞–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é, –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç\" –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 100, —Ç.–µ. –≤—ã–∫–ª—é—á–µ–Ω. –í –∫–∞—á–µ—Ç—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç: \n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n–ê —Ç–∞–∫–∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –º–æ–∂–µ—Ç —è–≤–ª—è—Ç—å—Å—è –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 –æ—Ç–≤–µ—á–∞—é—â–µ–µ –∑–∞ —Ç–æ, –ø—Ä–∏ –∫–∞–∫–æ–π –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ª–∞–π–∫–∞ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è –ª–∞–π–∫. –¢–æ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 100 –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ª–∞–π–∫ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∫–∞–∫ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —á–µ–≥–æ –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç, –∞ –∑–Ω–∞—á–∏—Ç –ø—Ä–∏ —ç—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫ –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 0, —Ç–æ –¥–∏–∑–ª–∞–π–∫ –±—É–¥–µ—Ç —Å—Ç–∞–≤–∏—Ç—å—Å—è –≤—Å–µ–º –∞–Ω–∫–µ—Ç–∞–º, —á—Ç–æ —Ç–∞–∫–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞. –†–µ–∫–æ–º–º–µ–Ω–¥—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –æ–∫–æ–ª–æ 50-—Ç–∏."
                elif "–ê–í–¢–û–ü–ò–õ–û–¢" in arg[:10]:
                    return "–ö–æ–º–∞–Ω–¥–∞, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –∞–Ω–∫–µ—Ç –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤. –ü–æ-—É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–∞. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π \"!–°—Ç–∞—Ä—Ç\". –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ -- –∫–æ–º–∞–Ω–¥—É \"!–°—Ç–æ–ø\" –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:\n\"–ø–æ–∫–∞–∑–∞—Ç—å\" -- –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã.\n\"–≤–∫–ª\" -- –≤–∫–ª—é—á–∏—Ç—å \"–∞–≤—Ç–æ–ø–∏–ª–æ—Ç\". –ê —Ç–∞–∫–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é 50. –≠—Ç–æ —á–∏—Å–ª–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, –ø—Ä–∏ –∫–∞–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ª–∞–π–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, —Å—Ç–∞–≤–∏—Ç—Å—è –ª–∞–π–∫, –∞ –ø—Ä–∏ –∫–∞–∫–æ–π -- –¥–∏–∑–ª–∞–π–∫. –¢.–µ. –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 50, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ª–∞–π–∫–∞ < 50 –±–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∏–∑–ª–∞–π–∫, –∏–Ω–∞—á–µ -- –ª–∞–π–∫. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç —Å—Ç–∞–≤–∏–ª –ª–∞–π–∫–∏ —á–∞—â–µ -- —É–º–µ–Ω—å—à–∏—Ç–µ —á–∏—Å–ª–æ, –∏–Ω–∞—á–µ -- —É–≤–µ–ª–∏—á—å—Ç–µ"
                else:
                    return "–ê—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –ø–æ–º–æ—â—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
            else:
                return "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥:\n\n–ù–∞—á–∞—Ç—å ‚Äî –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞\n!–ø–æ–º–æ—â—å ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–∫ –æ–±—â–µ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º, —Ç–∞–∫ –∏ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º, –µ—Å–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ—ë –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞\n!–æ–±—É—á–∏—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –∞–Ω–∫–µ—Ç–∞—Ö (–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞, –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞). –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏, —Å–∫–∞–∂–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤–∫—É—Å—ã\n!—Å—Ç–∞—Ä—Ç ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –±–µ—Å–µ–¥–µ —Å –í–∏–Ω—á–∏–∫–æ–º\n!—Å—Ç–æ–ø ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–µ —Å –í–∏–Ω—á–∏–∫–æ–º\n!–º–æ–¥–µ–ª—å ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏. –õ–∏–±–æ —É–∂–µ –≥–æ—Ç–æ–≤—É—é (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –¥–µ–≤—É—à–µ–∫), –ª–∏–±–æ –æ–±—É—á–µ–Ω–Ω—É—é –Ω–∞ –≤–∞—à–∏—Ö –∞–Ω–∫–µ—Ç–∞—Ö\n!–ß–° ‚Äî –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–Ω–∫–µ—Ç–µ, —Ç–æ –µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–∏–∑–ª–∞–π–∫. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n!–ë–° ‚Äî –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –≤ –∞–Ω–∫–µ—Ç–µ, —Ç–æ –µ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–∏–∑–ª–∞–π–∫. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n!—Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞\n!—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (—Å–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç –ª–∞–π–∫–Ω—É–ª, –∫–∞–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)\n!–∞–≤—Ç–æ–ª–∞–π–∫ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –ª–∞–π–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n!–∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –¥–∏–∑–ª–∞–π–∫ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n!–∞–≤—Ç–æ–ø–∏–ª–æ—Ç ‚Äî –±–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–∞–π–∫–∞—Ç—å –∏ –¥–∏–∑–ª–∞–π–∫–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –æ—Ü–µ–Ω–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç—Ç–æ–π –æ–ø—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ \"!–∞–≤—Ç–æ–ª–∞–π–∫\" –∏ \"!–∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫\"\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \"!–ø–æ–º–æ—â—å\" —Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∫–æ–º–∞–Ω–¥–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –ü—Ä–∏–º–µ—Ä \"!–ø–æ–º–æ—â—å –ß–°\" —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ \"!–ß–°\""
        elif "–°–¢–ê–†–¢" in msg[:6]:



            write_msg(user_id, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return work_in_Vinchik(user_id, Vinchik_ID)


        elif "–°–¢–û–ü" in msg[:5]:
            return "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–æ–ø –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        elif "–ú–û–î–ï–õ–¨" in msg[:7]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                args = msg[pos + 1:]
                if "–ü–û–ö–ê–ó–ê–¢–¨" in args[:9]:
                    if settings["model"] == model_girls:
                        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–Ω–∫–µ—Ç –¥–µ–≤—É—à–µ–∫"
                    elif settings["model"] == model_boys: 
                        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∞–Ω–∫–µ—Ç –ø–∞—Ä–Ω–µ–π"
                    else:
                        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö –≤–∫—É—Å–∞—Ö –º–æ–¥–µ–ª—å"
                if "–î–ï–í–£–®–ö–ò" in args[:8]:
                    settings["model"] = model_girls
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –¥–µ–≤—É—à–µ–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                if "–ú–û–Ø" in args[:4]:
                    settings["model"] = user_path + "\\classifier.pth"
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–ú–æ–¥–µ–ª—å, –æ–±—É—á–µ–Ω–Ω–∞—è –Ω–∞ –≤–∞—à–∏—Ö –≤–∫—É—Å–∞—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
                else:
                    return "–ê—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –º–æ–¥–µ–ª—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –º–æ–¥–µ–ª—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–ß–°" in msg[:3] or "–ë–°" in msg[:3]:
            if "–ß–°" in msg[:3]:
                text = "—á—ë—Ä–Ω"
                text_short = "–ß–°"
                d_id = "BL"
            else:
                text = "–±–µ–ª"
                text_short = "–ë–°"
                d_id = "WL"
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                args = msg[pos + 1:]
                while pos > 0:
                    pos = args.find(',')
                    if pos == -1:
                        pos = len(args)
                    arg = args[:pos]
                    if arg == '':
                        break
                    args = args[pos + 1:]
                    if len(args) != 0 and args[0] == ' ':
                        args = args[1:]
                    if "–ü–û–ö–ê–ó–ê–¢–¨" in arg[:9]:
                        if settings[d_id] == []:
                            return "–í–∞—à " + text + "—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
                        else:
                            return str(settings[d_id])
                    elif "–û–ß–ò–°–¢–ò–¢–¨" in arg[:9]:
                        settings[d_id] = []
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                        return "–í–∞—à " + text + "—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω"
                    elif "–í–û–ó–†–ê–°–¢" in arg[:8]:
                        settings[d_id].append({"–≤–æ–∑—Ä–∞—Å—Ç": arg[arg.find("–í–û–ó–†–ê–°–¢") + 7:]})
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif "–†–ê–î–ò–£–°" in arg[:7]:
                        settings[d_id].append({"—Ä–∞–¥–∏—É—Å": arg[arg.find("–†–ê–î–ò–£–°") + 6:]})
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif "–ì–û–†–û–î" in arg[:6]:
                        settings[d_id].append({"–≥–æ—Ä–æ–¥": arg[arg.find("–ì–û–†–û–î") + 5:]})
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif "–§–û–¢–û" in arg[:5]:
                        settings[d_id].append({"—Ñ–æ—Ç–æ": arg[arg.find("–§–û–¢–û") + 4:]})
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif "–û–ü–ò–°–ê–ù–ò–ï" in arg[:9]:
                        settings[d_id].append({"–æ–ø–∏—Å–∞–Ω–∏–µ": arg[arg.find("–û–ü–ò–°–ê–ù–ò–ï") + 8:]})
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif arg[0] == '\"':
                        settings[d_id].append(arg)
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    else:
                        return f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg} –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å " + text_short + "\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
                return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ " + text + "–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å " + text_short + "\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–û–¢–í–ï–¢" in msg[:6]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                args = msg[pos + 1:]
                while pos > 0:
                    pos = args.find(',')
                    if pos == -1:
                        pos = args.find(' ')
                        if pos == -1:
                            pos = len(args)
                    arg = args[:pos]
                    args = args[pos + 1:]
                    if "–ü–û–ö–ê–ó–ê–¢–¨" in arg[:9]:
                        return "–¥—Ä—É–∑—å—è: " + "–¥–∞" if settings["reply"]["friends"] else "–Ω–µ—Ç" + ", " + "—Å–æ–æ–±—â–µ–Ω–∏–µ: (–¥—Ä—É–≥: " + "–¥–∞" if settings["reply"]["message"]["friend"] else "–Ω–µ—Ç" + ", " + "GPT" if "GPT" in settings["reply"]["message"] else ("–Ω–µ—Ç" if settings["reply"]["message"]["text"] == "" else ("\"" + settings["reply"]["message"]["text"] + "\"")) + ")"
                    elif "–ù–ï–¢" in arg[:4]:
                        settings["reply"]["friends"] = "–Ω–µ—Ç"
                        settings["reply"]["message"]["GPT"] = False
                        settings["reply"]["message"]["text"] = ""
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                        return "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω"
                    elif "–î–†–£–ó–¨–Ø" in arg[:7]:
                        pos = max(args.find(','), args.find(' '), len(args))
                        arg = args[:pos]
                        args = args[pos + 1:]
                        pos = 0
                        if "–î–ê" in arg[:3]:
                            settings["reply"]["friends"] = True
                        elif "–ù–ï–¢" in arg[:4]:
                            settings["reply"]["friends"] = False
                        else:
                            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç–∞ {arg} –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"–¥—Ä—É–∑—å—è\" –∫–æ–º–∞–Ω–¥—ã \"!–æ—Ç–≤–µ—Ç\". –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ø–æ–º–æ—â—å –æ—Ç–≤–µ—Ç\""
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    elif "–°–û–û–ë–©–ï–ù–ò–ï" in arg[:10]:
                        pos = max(args.find(','), args.find(' '), len(args))
                        arg = args[:pos]
                        args = args[pos + 1:]
                        if "GPT" in arg[:4]:
                            settings["reply"]["message"]["GPT"] = True
                        elif "\"" in arg[0]:
                            settings["reply"]["friends"]["GPT"] = False
                            settings["reply"]["friends"]["text"] = arg[1:-1]
                        else:
                            return f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–≥—É–º–µ–Ω—Ç–∞ {arg} –∞—Ä–≥—É–º–µ–Ω—Ç–∞ \"—Å–æ–æ–±—â–µ–Ω–∏–µ\" –∫–æ–º–∞–Ω–¥—ã \"!–æ—Ç–≤–µ—Ç\". –ï—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ –∫–æ–≤—ã—á–∫–∞—Ö. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ø–æ–º–æ—â—å –æ—Ç–≤–µ—Ç\""
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                    else:
                        return f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg} –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –æ—Ç–≤–µ—Ç\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
                return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å " + text_short + "\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–°–¢–ê–¢–ò–°–¢–ò–ö–ê" in msg[:11]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                args = msg[pos + 1:]
                if "–ü–û–ö–ê–ó–ê–¢–¨" in args[:9]:
                    if settings["stat"] == True:
                        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è"
                    else: 
                        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è"
                if "–î–ê" in args[:3]:
                    settings["stat"] = True
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                if "–ù–ï–¢" in args[:4]:
                    settings["stat"] = True
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è"
                else:
                    return "–ê—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–ê–í–¢–û–õ–ê–ô–ö" in msg[:9]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                arg = msg[pos + 1:]
                if "–ü–û–ö–ê–ó–ê–¢–¨" in arg[:9]:
                    return "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ–ª–∞–π–∫–∞: " + str(settings["autolike"]) + " %"
                else:
                    try:
                        al = int(arg)
                        settings["autolike"] = al
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                        return "–ü–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ–ª–∞–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + str(al) + "%"
                    except:
                        return f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg} –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –∞–≤—Ç–æ–ª–∞–π–∫\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –∞–≤—Ç–æ–ª–∞–π–∫\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–ê–í–¢–û–î–ò–ó–õ–ê–ô–ö" in msg[:12]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                arg = msg[pos + 1:]
                if "–ü–û–ö–ê–ó–ê–¢–¨" in arg[:9]:
                    return "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫–∞: " + str(settings["autodislike"]) + " %"
                else:
                    try:
                        dl = int(arg)
                        settings["autodislike"] = dl
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                        return "–ü–∞—Ä–∞–º–µ—Ç—Ä –∞–≤—Ç–æ–ª–∞–π–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + str(dl) + "%"
                    except:
                        return f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg} –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
            else:
                return "–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –∞–≤—Ç–æ–¥–∏–∑–ª–∞–π–∫\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        elif "–ê–í–¢–û–ü–ò–õ–û–¢" in msg[:10]:
            pos = msg.find(' ')
            if pos > 0:
                with open(user_path + '\\settings.json', 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                arg = msg[pos + 1:]
                if "–ü–û–ö–ê–ó–ê–¢–¨" in arg[:9]:
                    return "–ê–≤—Ç–æ–ø–∏–ª–æ—Ç: " + "–æ—Ç–∫–ª—é—á—ë–Ω" if settings["autopilot"] == -1 else (str(settings["autopilot"]) + " %")
                elif "–í–ö–õ" in arg[:4]:
                    settings["autodislike"] = 50
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –≤–∫–ª—é—á—ë–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 50%"
                elif "–í–´–ö–õ" in arg[:5]:
                    settings["autodislike"] = -1
                    with open(user_path + '\\settings.json', 'w') as f:
                        f.write(json.dumps(settings))
                    return "–ê–≤—Ç–æ–ø–∏–ª–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω"
                else:
                    try:
                        ap = int(arg)
                        settings["autopilot"] = ap
                        with open(user_path + '\\settings.json', 'w') as f:
                            f.write(json.dumps(settings))
                        return "–ü–∞—Ä–∞–º–µ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞ –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: " + str(ap) + "%"
                    except:
                        return f"–ê—Ä–≥—É–º–µ–Ω—Ç {arg} –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \"!–ü–æ–º–æ—â—å –∞–≤—Ç–æ–ø–∏–ª–æ—Ç\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ"
        else:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ \"!–ü–æ–º–æ—â—å\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

async def server():
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
        
                print('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
                print(f'–û—Ç: {event.user_id}\n', end='')



                bot = VkBot(event.user_id)
                write_msg(event.user_id, bot.new_message(event.user_id, event.text))

                '''
                try:
                    bot = VkBot(event.user_id)
                    write_msg(event.user_id, bot.new_message(event.user_id, event.text))
                except:
                    print("\n–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
                    write_msg(event.user_id, "–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –∏–∑-–∑–∞ –∫–∞–ø—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π \"!—Å—Ç–∞—Ä—Ç\"")
                '''
                print('–¢–µ–∫—Å—Ç: ', event.text)

if __name__ == '__main__':
    print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    start_server = server()
    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()